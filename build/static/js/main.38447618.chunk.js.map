{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","inputVisible","size","color","this","className","value","onChange","e","setState","target","type","parseInt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RA2DeA,E,4MAtDbC,MAAQ,CACNC,cAAc,EACdC,KAAM,GACNC,MAAO,W,uDAGE,IAAD,SAC8BC,KAAKJ,MAAnCC,EADA,EACAA,aAAcE,EADd,EACcA,MAAOD,EADrB,EACqBA,KAC7B,OACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,UACb,sCACA,6BACA,6BACE,kDAIA,4BAAQC,MAAOL,EAAcM,SAAU,SAACC,GAAD,OAAO,EAAKC,SACjD,CAAER,aAAiC,SAAnBO,EAAEE,OAAOJ,UACzB,wCACA,2CAGJ,6BACE,0CAGA,2BAAOK,KAAM,QAASL,MAAOH,EACtBI,SAAU,SAACC,GAAD,OAAO,EAAKC,SACpB,CAAEN,MAAOK,EAAEE,OAAOJ,YAE7B,6BAEE,yCAGA,2BAAOK,KAAM,SAAUL,MAAOJ,EACvBK,SAAU,SAACC,GAAD,OAAO,EAAKC,SACpB,CAAEP,KAAMM,EAAEE,OAAOJ,aAG9B,yBAAKD,UAAU,cACb,kBAAC,IAAD,CACEJ,aAAcA,EACdE,MAAOA,EACPD,KAAMU,SAAS,IAAD,OAAKV,Y,GA/CbW,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.38447618.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport JTimePicker from 'reactjs-timepicker'\n\nclass App extends React.Component {\n  state = {\n    inputVisible: false,\n    size: 30,\n    color: '#000066',\n  }\n\n  render () {\n    const { inputVisible, color, size } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"option\">\n          <h3>option</h3>\n          <hr/>\n          <div>\n            <label>\n              input Visible :\n            </label>\n\n            <select value={inputVisible} onChange={(e) => this.setState(\n              { inputVisible: e.target.value === 'true' })}>\n              <option>true</option>\n              <option>false</option>\n            </select>\n          </div>\n          <div>\n            <label>\n              color :\n            </label>\n            <input type={'color'} value={color}\n                   onChange={(e) => this.setState(\n                     { color: e.target.value })}/>\n          </div>\n          <div>\n\n            <label>\n              size :\n            </label>\n            <input type={'number'} value={size}\n                   onChange={(e) => this.setState(\n                     { size: e.target.value })}/>\n          </div>\n        </div>\n        <div className=\"App-header\">\n          <JTimePicker\n            inputVisible={inputVisible}\n            color={color}\n            size={parseInt(`0${size}`)}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}